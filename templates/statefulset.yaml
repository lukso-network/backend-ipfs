apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "ipfs-cluster.fullname" . }}
  labels:
    {{- include "ipfs-cluster.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  serviceName: {{ include "ipfs-cluster.fullname" . }}
  selector:
    matchLabels:
        app: {{ include "ipfs-cluster.fullname" . }}
  template:
    metadata:
      labels:
        app: {{ include "ipfs-cluster.fullname" . }}
    spec:
      initContainers:
        - name: configure-ipfs
          image: {{ .Values.images.ipfs }}
          command: ["sh", "/config-scripts/configure-ipfs.sh"]
          volumeMounts:
            - name: ipfs-storage
              mountPath: /data/ipfs
            - name: config-scripts
              mountPath: /config-scripts
      containers:
        - name: ipfs
          image: {{ .Values.images.ipfs }}
          imagePullPolicy: IfNotPresent
          env:
            - name: IPFS_FD_MAX
              value: "4096"
          ports:
            - name: swarm
              containerPort: 4001
            - name: api
              containerPort: 5001
            - name: http
              containerPort: 8080
          livenessProbe:
            tcpSocket:
              port: swarm
            initialDelaySeconds: 30
            timeoutSeconds: 5
            periodSeconds: 15
          readinessProbe:
            tcpSocket:
              port: 5001
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
          volumeMounts:
            - name: ipfs-storage
              mountPath: /data/ipfs
            - name: config-scripts
              mountPath: /config-scripts
          resources: {}
        - name: ipfs-cluster
          image: {{ .Values.images.ipfsCluster }}
          imagePullPolicy: IfNotPresent
          command: ["sh", "/config-scripts/entrypoint.sh"]
          envFrom:
            - configMapRef:
                name: env-config
          env:
            - name: BOOTSTRAP_PEER_ID
              valueFrom:
                configMapKeyRef:
                  name: env-config
                  key: bootstrap-peer-id
            - name: BOOTSTRAP_PEER_PRIV_KEY
              valueFrom:
                secretKeyRef:
                  name: secret-config
                  key: bootstrap-peer-priv-key
            - name: CLUSTER_SECRET
              valueFrom:
                secretKeyRef:
                  name: secret-config
                  key: cluster-secret
            - name: SVC_NAME
              value: {{ include "ipfs-cluster.fullname" . }}
          ports:
            - name: api-http
              containerPort: 9094
            - name: proxy-http
              containerPort: 9095
            - name: cluster-swarm
              containerPort: 9096
          livenessProbe:
            tcpSocket:
              port: cluster-swarm
            initialDelaySeconds: 5
            timeoutSeconds: 5
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /id
              port: api-http
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
          volumeMounts:
            - name: cluster-storage
              mountPath: /data/ipfs-cluster
            - name: config-scripts
              mountPath: /config-scripts
          resources: {}

      volumes:
        - name: config-scripts
          configMap:
            name: bootstrap-conf

  volumeClaimTemplates:
    - metadata:
        name: cluster-storage
      spec:
        storageClassName: standard
        accessModes: ["ReadWriteOnce"] # the volume can be mounted as read-write by a single node
        resources:
          requests:
            storage: 10Gi
    - metadata:
        name: ipfs-storage
      spec:
        storageClassName: standard
        accessModes: ["ReadWriteOnce"] # the volume can be mounted as read-write by a single node
        resources:
          requests:
            storage: 100Gi
